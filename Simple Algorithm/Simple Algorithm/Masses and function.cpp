//Лекция 4
//Для массивов передаёться в функцию адреса и они меняються на прямую, для переменных рабта происходит с копиями 
//(По значению), можно изменять с помощью адресов.
//& - может быть, как бинарная (конъюнкция), а может быть как унарная - взятие адреса.
//Адрес переменной в памяти, просто число. Типа (int*)
//К адресу можно прибавить или вычесть целое число, адреса можно вычитать (если одинаковый тип), но нельзя складывать.
//Тип указателя важен, для понимания, что храниться по адресу. 
//При сложении с числом автоматически к числу применятся sizeof
//* - разъименования переменной

//Чистая фунция на Си++
//Зависит от параметров, возвращает лишь одно значение, детирминирована, не занимается вводом и выводом, не портит память.
//Для возвращения нескольких значений, можно использовать void и менять значения по адресам.
//Или можно создать койтенер (struct) с нужным количеством переменных. В С++ есть много готовых койтенеров.
//Typedef лишь создание синонима имени типа, C++ позволяет не использовать переминование и писать название без указания struct.

//-> замена для (*p).a для указателя на структуру, . для самой стуктуры
//sizeof - показывает вес определённого типа

//Реинтропретация данных
//x = *(int64_t*)(&y)
//x - int64_t; y - double;
//x = *reinterpret_cast<int64_t*>(&y);

//x = *static_cast<int64_t*>(&y); - есть такой спопсоб, но не для этого случая.


//Массив - структура данных фиксированного размера с однотипными эл-тами
//оперативно доступных по индексу. (за O(1)). A[i]. 
//A[0] - тот же указатель на массив